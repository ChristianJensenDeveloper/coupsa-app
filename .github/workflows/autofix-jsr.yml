name: AutoFix JSR & Cleanup

on:
  workflow_dispatch:   # you trigger it once from the Actions tab

permissions:
  contents: write
  pull-requests: write

jobs:
  fix:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Remove stray package.json files outside root
        run: |
          set -e
          ROOT_PKG="package.json"
          # list every package.json except the root one
          find . -name package.json -not -path "./${ROOT_PKG}" -not -path "./${ROOT_PKG}" -not -path "./package.json" | while read -r f; do
            if [ "$f" != "./package.json" ]; then
              echo "Deleting stray $f"
              git rm -f "$f" || true
            fi
          done

      - name: Remove lockfiles (avoid stale deps)
        run: |
          rm -f package-lock.json pnpm-lock.yaml yarn.lock || true
          git rm -f package-lock.json pnpm-lock.yaml yarn.lock 2>/dev/null || true

      - name: Replace jsr: imports with npm imports
        run: |
          set -e
          # Replace jsr:@supabase/supabase-js*@* -> @supabase/supabase-js
          grep -RIl --exclude-dir=.git 'jsr:@supabase/supabase-js' || true
          grep -RIl --exclude-dir=.git 'jsr:@supabase/supabase-js' | while read -r f; do
            echo "Fixing $f"
            sed -i 's#jsr:@supabase/supabase-js[^"]*#@supabase/supabase-js#g' "$f"
          done
          # Generic safety pass for any other jsr: imports (comment them so build fails loudly if unknown)
          if grep -RIl --exclude-dir=.git 'jsr:' | grep -v '^$' >/dev/null 2>&1; then
            echo "::warning::Found other jsr: imports. Commenting them for now."
            grep -RIl --exclude-dir=.git 'jsr:' | while read -r f; do
              sed -i 's#jsr:#// jsr: (removed) #g' "$f"
            done
          fi

      - name: Write clean root package.json
        run: |
          cat > package.json <<'JSON'
          {
            "name": "coupsa-app",
            "version": "1.0.0",
            "private": true,
            "type": "module",
            "engines": { "node": "20.x" },
            "scripts": {
              "dev": "vite",
              "build": "vite build",
              "preview": "vite preview --port 3000"
            },
            "dependencies": {
              "@supabase/supabase-js": "^2.45.0",
              "react": "^18.2.0",
              "react-dom": "^18.2.0",
              "@types/node": "^20.0.0",
              "@types/react": "^18.2.0",
              "@types/react-dom": "^18.2.0",
              "@radix-ui/react-alert-dialog": "^1.0.5",
              "@radix-ui/react-dialog": "^1.0.5",
              "@radix-ui/react-dropdown-menu": "^2.0.6",
              "@radix-ui/react-popover": "^1.0.7",
              "@radix-ui/react-select": "^2.0.0",
              "@radix-ui/react-separator": "^1.0.3",
              "@radix-ui/react-slot": "^1.0.2",
              "@radix-ui/react-switch": "^1.0.3",
              "@radix-ui/react-tabs": "^1.0.4",
              "@radix-ui/react-tooltip": "^1.0.7",
              "class-variance-authority": "^0.7.0",
              "lucide-react": "^0.263.1",
              "sonner": "^1.4.3",
              "tailwind-merge": "^1.14.0",
              "xlsx": "^0.20.0"
            },
            "devDependencies": {
              "typescript": "^5.4.0",
              "@vitejs/plugin-react": "^4.2.1",
              "vite": "^5.2.0",
              "eslint": "^8.57.0",
              "eslint-plugin-react": "^7.34.0"
            }
          }
          JSON

      - name: Ensure vite.config.ts exists
        run: |
          mkdir -p .
          cat > vite.config.ts <<'TS'
          import { defineConfig } from 'vite'
          import react from '@vitejs/plugin-react'
          export default defineConfig({
            plugins: [react()],
          })
          TS

      - name: Commit and push to main
        run: |
          set -e
          git config user.name "autofix-bot"
          git config user.email "autofix-bot@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "AutoFix: remove jsr imports, clean package.json, drop lockfiles"
            git push origin HEAD:main
          fi

      # OPTIONAL: trigger Vercel redeploy via a Deploy Hook
      - name: Trigger Vercel Deploy (optional)
        if: env.VERCEL_DEPLOY_HOOK_URL != ''
        env:
          VERCEL_DEPLOY_HOOK_URL: ${{ secrets.VERCEL_DEPLOY_HOOK_URL }}
        run: |
          echo "Triggering Vercel deploy hook"
          curl -s -X POST "$VERCEL_DEPLOY_HOOK_URL" || true
