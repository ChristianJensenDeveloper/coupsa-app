name: Zero-Touch Self-Heal + Redeploy

on:
  push:
    branches: [ main ]           # auto-run on every push to main
  schedule:
    - cron: "*/15 * * * *"       # also run every 15 minutes
  workflow_dispatch:              # allow manual run

permissions:
  contents: write

jobs:
  heal:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 1) Remove any extra package.json files (keep only the root one)
      - name: Remove stray package.json files outside repo root
        shell: bash
        run: |
          set -euo pipefail
          ROOT="./package.json"
          mapfile -t PKGS < <(find . -type f -name "package.json" ! -path "$ROOT" || true)
          if (( ${#PKGS[@]} )); then
            for f in "${PKGS[@]}"; do
              echo "Deleting stray $f"
              git rm -f "$f" || true
            done
          else
            echo "No stray package.json files."
          fi

      # 2) Replace any jsr: imports with npm equivalents
      - name: Replace jsr imports (supabase) and comment unknown jsr
        shell: bash
        run: |
          set -euo pipefail
          # Fix common Supabase JSR import
          mapfile -t SUPA < <(grep -RIl 'jsr:@supabase/supabase-js' --exclude-dir=.git || true)
          if (( ${#SUPA[@]} )); then
            for f in "${SUPA[@]}"; do
              echo "Fixing $f"
              sed -i 's#jsr:@supabase/supabase-js[^"]*#@supabase/supabase-js#g' "$f"
            done
          else
            echo "No jsr:@supabase/supabase-js imports found."
          fi
          # Comment any remaining jsr: references so build surfaces the file clearly
          mapfile -t OTHER < <(grep -RIl 'jsr:' --exclude-dir=.git || true)
          if (( ${#OTHER[@]} )); then
            echo "::warning::Other jsr: imports found; commenting them for now."
            for f in "${OTHER[@]}"; do
              sed -i 's#jsr:#// jsr: (removed) #g' "$f"
            done
          else
            echo "No other jsr: imports."
          fi

      # 3) Ensure a clean root package.json (vite/react + supabase)
      - name: Write clean root package.json
        shell: bash
        run: |
          set -euo pipefail
          cat > package.json <<'JSON'
          {
            "name": "coupsa-app",
            "version": "1.0.0",
            "private": true,
            "type": "module",
            "engines": { "node": "20.x" },
            "scripts": {
              "dev": "vite",
              "build": "vite build",
              "preview": "vite preview --port 3000"
            },
            "dependencies": {
              "@supabase/supabase-js": "^2.45.0",
              "react": "^18.2.0",
              "react-dom": "^18.2.0",
              "@types/node": "^20.0.0",
              "@types/react": "^18.2.0",
              "@types/react-dom": "^18.2.0",
              "@radix-ui/react-alert-dialog": "^1.0.5",
              "@radix-ui/react-dialog": "^1.0.5",
              "@radix-ui/react-dropdown-menu": "^2.0.6",
              "@radix-ui/react-popover": "^1.0.7",
              "@radix-ui/react-select": "^2.0.0",
              "@radix-ui/react-separator": "^1.0.3",
              "@radix-ui/react-slot": "^1.0.2",
              "@radix-ui/react-switch": "^1.0.3",
              "@radix-ui/react-tabs": "^1.0.4",
              "@radix-ui/react-tooltip": "^1.0.7",
              "class-variance-authority": "^0.7.0",
              "lucide-react": "^0.263.1",
              "sonner": "^1.4.3",
              "tailwind-merge": "^1.14.0",
              "xlsx": "^0.20.0"
            },
            "devDependencies": {
              "typescript": "^5.4.0",
              "@vitejs/plugin-react": "^4.2.1",
              "vite": "^5.2.0",
              "eslint": "^8.57.0",
              "eslint-plugin-react": "^7.34.0"
            }
          }
          JSON
          echo "Wrote clean package.json"

      # 4) Ensure vite.config.ts exists
      - name: Ensure vite.config.ts
        shell: bash
        run: |
          set -euo pipefail
          cat > vite.config.ts <<'TS'
          import { defineConfig } from 'vite'
          import react from '@vitejs/plugin-react'
          export default defineConfig({
            plugins: [react()],
          })
          TS
          echo "Ensured vite.config.ts"

      # 5) Remove lockfiles that can preserve bad deps
      - name: Remove lockfiles
        shell: bash
        run: |
          set -euo pipefail
          git rm -f package-lock.json pnpm-lock.yaml yarn.lock 2>/dev/null || true
          rm -f package-lock.json pnpm-lock.yaml yarn.lock || true
          echo "Lockfiles removed (if any)."

      # 6) Commit & push only if something changed
      - name: Commit & push if changed
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "autofix-bot"
          git config user.email "autofix-bot@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Self-heal: remove jsr imports, clean pkg, drop lockfiles"
            git push origin HEAD:main
          fi

      # 7) Optional: trigger Vercel redeploy (so you do nothing)
      - name: Trigger Vercel deploy (optional)
        if: env.VERCEL_DEPLOY_HOOK_URL != ''
        env:
          VERCEL_DEPLOY_HOOK_URL: ${{ secrets.VERCEL_DEPLOY_HOOK_URL }}
        run: |
          set -euo pipefail
          echo "Triggering Vercel deploy hook"
          curl -fsSL -X POST "$VERCEL_DEPLOY_HOOK_URL" || true
